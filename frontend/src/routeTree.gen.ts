/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/routes/__root'
import { Route as AppRouteRouteImport } from './app/routes/app/route'
import { Route as IndexRouteImport } from './app/routes/index'
import { Route as AppIndexRouteImport } from './app/routes/app/index'
import { Route as AppTreatmentsRouteImport } from './app/routes/app/treatments'
import { Route as AppEmployeesRouteImport } from './app/routes/app/employees'
import { Route as AppClientsRouteImport } from './app/routes/app/clients'
import { Route as AppAppointmentsRouteImport } from './app/routes/app/appointments'

const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppTreatmentsRoute = AppTreatmentsRouteImport.update({
  id: '/treatments',
  path: '/treatments',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppEmployeesRoute = AppEmployeesRouteImport.update({
  id: '/employees',
  path: '/employees',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppClientsRoute = AppClientsRouteImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAppointmentsRoute = AppAppointmentsRouteImport.update({
  id: '/appointments',
  path: '/appointments',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/appointments': typeof AppAppointmentsRoute
  '/app/clients': typeof AppClientsRoute
  '/app/employees': typeof AppEmployeesRoute
  '/app/treatments': typeof AppTreatmentsRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app/appointments': typeof AppAppointmentsRoute
  '/app/clients': typeof AppClientsRoute
  '/app/employees': typeof AppEmployeesRoute
  '/app/treatments': typeof AppTreatmentsRoute
  '/app': typeof AppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/appointments': typeof AppAppointmentsRoute
  '/app/clients': typeof AppClientsRoute
  '/app/employees': typeof AppEmployeesRoute
  '/app/treatments': typeof AppTreatmentsRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/appointments'
    | '/app/clients'
    | '/app/employees'
    | '/app/treatments'
    | '/app/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app/appointments'
    | '/app/clients'
    | '/app/employees'
    | '/app/treatments'
    | '/app'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/appointments'
    | '/app/clients'
    | '/app/employees'
    | '/app/treatments'
    | '/app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/treatments': {
      id: '/app/treatments'
      path: '/treatments'
      fullPath: '/app/treatments'
      preLoaderRoute: typeof AppTreatmentsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/employees': {
      id: '/app/employees'
      path: '/employees'
      fullPath: '/app/employees'
      preLoaderRoute: typeof AppEmployeesRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/clients': {
      id: '/app/clients'
      path: '/clients'
      fullPath: '/app/clients'
      preLoaderRoute: typeof AppClientsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/appointments': {
      id: '/app/appointments'
      path: '/appointments'
      fullPath: '/app/appointments'
      preLoaderRoute: typeof AppAppointmentsRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppAppointmentsRoute: typeof AppAppointmentsRoute
  AppClientsRoute: typeof AppClientsRoute
  AppEmployeesRoute: typeof AppEmployeesRoute
  AppTreatmentsRoute: typeof AppTreatmentsRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppAppointmentsRoute: AppAppointmentsRoute,
  AppClientsRoute: AppClientsRoute,
  AppEmployeesRoute: AppEmployeesRoute,
  AppTreatmentsRoute: AppTreatmentsRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
