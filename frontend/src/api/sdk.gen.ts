// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  PostApiAuthLoginData,
  PostApiAuthLoginResponse,
  PostApiAuthLoginError,
  GetApiStaffData,
  GetApiStaffResponse,
  PostApiStaffData,
  PostApiStaffResponse,
  PostApiStaffError,
  DeleteApiStaffByIdData,
  DeleteApiStaffByIdError,
  GetApiStaffByIdData,
  GetApiStaffByIdResponse,
  GetApiStaffByIdError,
  PutApiStaffByIdData,
  PutApiStaffByIdResponse,
  PutApiStaffByIdError,
  GetApiTreatmentsData,
  GetApiTreatmentsResponse,
  PostApiTreatmentsData,
  PostApiTreatmentsResponse,
  PostApiTreatmentsError,
  DeleteApiTreatmentsByIdData,
  DeleteApiTreatmentsByIdError,
  GetApiTreatmentsByIdData,
  GetApiTreatmentsByIdResponse,
  GetApiTreatmentsByIdError,
  PutApiTreatmentsByIdData,
  PutApiTreatmentsByIdResponse,
  PutApiTreatmentsByIdError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const postApiAuthLogin = <ThrowOnError extends boolean = false>(
  options: Options<PostApiAuthLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAuthLoginResponse,
    PostApiAuthLoginError,
    ThrowOnError
  >({
    url: "/api/Auth/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getApiStaff = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiStaffData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiStaffResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/Staff",
    ...options,
  });
};

export const postApiStaff = <ThrowOnError extends boolean = false>(
  options: Options<PostApiStaffData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiStaffResponse,
    PostApiStaffError,
    ThrowOnError
  >({
    url: "/api/Staff",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const deleteApiStaffById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiStaffByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    DeleteApiStaffByIdError,
    ThrowOnError
  >({
    url: "/api/Staff/{id}",
    ...options,
  });
};

export const getApiStaffById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiStaffByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiStaffByIdResponse,
    GetApiStaffByIdError,
    ThrowOnError
  >({
    url: "/api/Staff/{id}",
    ...options,
  });
};

export const putApiStaffById = <ThrowOnError extends boolean = false>(
  options: Options<PutApiStaffByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiStaffByIdResponse,
    PutApiStaffByIdError,
    ThrowOnError
  >({
    url: "/api/Staff/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getApiTreatments = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiTreatmentsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiTreatmentsResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/Treatments",
    ...options,
  });
};

export const postApiTreatments = <ThrowOnError extends boolean = false>(
  options: Options<PostApiTreatmentsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiTreatmentsResponse,
    PostApiTreatmentsError,
    ThrowOnError
  >({
    url: "/api/Treatments",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const deleteApiTreatmentsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiTreatmentsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    DeleteApiTreatmentsByIdError,
    ThrowOnError
  >({
    url: "/api/Treatments/{id}",
    ...options,
  });
};

export const getApiTreatmentsById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiTreatmentsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiTreatmentsByIdResponse,
    GetApiTreatmentsByIdError,
    ThrowOnError
  >({
    url: "/api/Treatments/{id}",
    ...options,
  });
};

export const putApiTreatmentsById = <ThrowOnError extends boolean = false>(
  options: Options<PutApiTreatmentsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiTreatmentsByIdResponse,
    PutApiTreatmentsByIdError,
    ThrowOnError
  >({
    url: "/api/Treatments/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};
